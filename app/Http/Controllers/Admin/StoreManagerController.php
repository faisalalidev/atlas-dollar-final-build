<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Mail\StoreUserApprovedMail;
use App\Models\PortalUser;
use App\Models\Store;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Str;

class StoreManagerController extends CRUDController
{
    public function __construct()
    {
        parent::__construct();
        $this->primary_model = new PortalUser();
        $this->store_model = new Store();
        $this->module_name = 'store_managers';
        $this->actions = ['add', 'edit','delete'];
        $this->raw_columns = ['approve', 'actions'];
        $this->approve_view = $this->module_name . '.approve_view';
        $this->data_assign['page_title'] = ucwords(str_replace('_', ' ', Str::singular($this->module_name)));
        $this->data_assign['module_name'] = $this->module_name;
        $this->data_assign['module_add_title'] = ucfirst(explode('_', Str::singular($this->module_name))[1]);
    }

    public function show()
    {
        $this->data_assign['module_ajax_listing_url'] = config('constants.ADMIN_PREFIX') . $this->module_name . '_dtListing';

        $this->data_assign['primary_dt_columns'] = $this->primary_model->getManagersDataTableColumns();

        return parent::show();
    }
    public function edit($id)
    {
        $this->data_assign['stores'] = $this->store_model->orderBy('created_at','desc')->where('active',1)->get();

        return parent::edit($id); // TODO: Change the autogenerated stub
    }

    public function delete($id)
    {
        $this->primary_model->find($id)->update(['deleted_at' => date('Y-m-d H:i:s')]);

        return back();
    }

    public function dtListing()
    {
        $data = $this->primary_model->managersAjaxListing();

        return $this->makeDataTable($data, $this->actions, $this->module_name);
    }

    public function update(Request $request)
    {

        $data = $this->primary_model->find($request->id);

        if ((int)$request->approved_by_admin && (int)$request->approved_by_admin != $data->approved_by_admin){
            Mail::to($data->email)->send(new StoreUserApprovedMail($data));
        }

        if (!empty($request->password)){

            $request->merge(['password' => bcrypt($request->password)]);
        }else{

            $request->request->remove('password');
        }

        $data->update($request->only($this->primary_model->getFillable()));

        return redirect()->route(config('constants.ADMIN_PREFIX') . $this->data_assign['module_name'] . '_show');
    }

    public function changeStatus(Request $request)
    {
        $data = $this->primary_model->find($request->id);

        $data->update(['approved_by_admin' => $request->active]);

        if ((int)$request->active){

            Mail::to($data->email)->send(new StoreUserApprovedMail($data));
        }
    }

}
